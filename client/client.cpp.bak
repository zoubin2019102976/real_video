#include <iostream>
#include <cstring>
#include <vector>
#include <time.h>
#include <sstream>

#include <opencv2/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>

using namespace std;
using namespace cv;

int main(int argc, char** argv){
	/*
	 *socket
	 * */
	//int clnt_sock = socket(AF_INET, SCOK_STREAM, IPPROTO_TCP);

	struct sockaddr_in serv_addr;
	memset(&serv_addr, 0, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = inet_addr("172.29.199.4");
	serv_addr.sin_port = htons(1235);
	/**/

	/*
	 *opencv2
	 * */
	const string WIN_RECV = "RECV_BACK";
	namedWindow(WIN_RECV, WINDOW_AUTOSIZE);

	char recvBuf[16];
	char recvBuf_1[1];
	Mat img_decode;
	vector<uchar> data;

	while(1){
		int clnt_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
		connect(clnt_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr));
		read(clnt_sock, recvBuf, 16);
		for(int i = 0; i < 16; ++i){
			if(recvBuf[i] < '0' || recvBuf[i] > '9'){
				recvBuf[i] = ' ';
			}
		}
		data.resize(std::atoi(recvBuf));
		for(int i = 0; i < std::atoi(recvBuf); ++i){
			read(clnt_sock, recvBuf_1, 1);
			data[i] = recvBuf_1[0];
		}

		img_decode = imdecode(data, IMREAD_COLOR);
		time_t tt = time(NULL);
		tm* t = localtime(&tt);
		int year, month, day, hour, min, sec;
		year = t ->tm_year + 1900;
		month = t ->tm_mon + 1;
		day = t ->tm_mday;
		hour = t ->tm_hour;
		min = t ->tm_min;
		sec = t ->tm_sec;
		string times = "";
		/*times.append(year);
		times.append("-");
		times.append(month);
		times.append("-");
		times.append(day);
		times.append(" ");
		times.append(hour);
		times.append(":");
		times.append(min);
		times.append(":");
		times.append(sec);*/
		ostringstream oss;
		oss << year << "-" << month << "-" << day << " " << hour << ":" << min << ":" << sec;
		times.append(oss.str());

		Point org(200, 20);
		putText(img_decode, times, org, FONT_HERSHEY_COMPLEX, 1, Scalar(255, 255, 255));
		imshow(WIN_RECV, img_decode);
		char c = waitKey(5);
		if(c == 27){
			break;
		}
	}
	cout << "Client: Bye..." << endl;
	return 0;
}
